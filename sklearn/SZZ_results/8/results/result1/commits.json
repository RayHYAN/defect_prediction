{"38c7e93b1edcbfb85060cf7c14cca3ab47b9267c":{"changes":{"sklearn\/decomposition\/online_lda.py":"MODIFY","sklearn\/decomposition\/tests\/test_online_lda.py":"MODIFY"},"diff":{"sklearn\/decomposition\/online_lda.py":[{"add":["561","                        print('iteration: %d of max_iter: %d, perplexity: %.4f'","562","                              % (i + 1, max_iter, bound))","567","","568","                elif self.verbose:","569","                    print('iteration: %d of max_iter: %d' % (i + 1, max_iter))"],"delete":["561","                        print('iteration: %d, perplexity: %.4f'","562","                              % (i + 1, bound))"]}],"sklearn\/decomposition\/tests\/test_online_lda.py":[{"add":["0","import sys","1","","13","from sklearn.utils.testing import assert_equal","23","from sklearn.externals.six import StringIO","383","def check_verbosity(verbose, evaluate_every, expected_lines,","384","                    expected_perplexities):","385","    n_components, X = _build_sparse_mtx()","386","    lda = LatentDirichletAllocation(n_components=n_components, max_iter=3,","387","                                    learning_method='batch',","388","                                    verbose=verbose,","389","                                    evaluate_every=evaluate_every,","390","                                    random_state=0)","391","    out = StringIO()","392","    old_out, sys.stdout = sys.stdout, out","393","    try:","394","        lda.fit(X)","395","    finally:","396","        sys.stdout = old_out","397","","398","    n_lines = out.getvalue().count('\\n')","399","    n_perplexity = out.getvalue().count('perplexity')","400","    assert_equal(expected_lines, n_lines)","401","    assert_equal(expected_perplexities, n_perplexity)","402","","403","","404","def test_verbosity():","405","    for verbose, evaluate_every, expected_lines, expected_perplexities in [","406","        (False, 1, 0, 0),","407","        (False, 0, 0, 0),","408","        (True, 0, 3, 0),","409","        (True, 1, 3, 3),","410","        (True, 2, 3, 1),","411","    ]:","412","        yield (check_verbosity, verbose, evaluate_every, expected_lines,","413","               expected_perplexities)","414","","415",""],"delete":[]}]}},"1652a709190b37423b2ccba45cc65d32e7d326b4":{"changes":{"sklearn\/base.py":"MODIFY","doc\/developers\/contributing.rst":"MODIFY"},"diff":{"sklearn\/base.py":[{"add":["360","        The coefficient R^2 is defined as (1 - u\/v), where u is the residual","361","        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total","363","        The best possible score is 1.0 and it can be negative (because the"],"delete":["360","        The coefficient R^2 is defined as (1 - u\/v), where u is the regression","361","        sum of squares ((y_true - y_pred) ** 2).sum() and v is the residual","363","        Best possible score is 1.0 and it can be negative (because the"]}],"doc\/developers\/contributing.rst":[{"add":["745","Python versions supported","746","-------------------------","748","All scikit-learn code should work unchanged in both Python 2.7 and 3.4 or","749","newer. Since Python 3.x is not backwards compatible, that may require changes","750","to code and it certainly requires testing on both 2.7 and 3.4 or newer."],"delete":["745","Python 3.x support","746","------------------","748","All scikit-learn code should work unchanged in both Python 2.[67]","749","and 3.2 or newer. Since Python 3.x is not backwards compatible,","750","that may require changes to code and it certainly requires testing","751","on both 2.7 and 3.2 or newer."]}]}},"ddd886baa8d9840e1897fed5a4ffb84138b18d81":{"changes":{"sklearn\/utils\/__init__.py":"MODIFY"},"diff":{"sklearn\/utils\/__init__.py":[{"add":["192","        raise ValueError(\"Cannot sample %d out of arrays with dim %d \""],"delete":["192","        raise ValueError(\"Cannot sample %d out of arrays with dim %d\""]}]}},"c2b0de59aa778bff268d8eebfaaa9158487ef9a7":{"changes":{"sklearn\/datasets\/base.py":"MODIFY","sklearn\/datasets\/tests\/test_base.py":"MODIFY"},"diff":{"sklearn\/datasets\/base.py":[{"add":["570","","571","    module_path = dirname(__file__)","572","    base_dir = join(module_path, 'data')","576","    with open(join(module_path, 'descr', 'diabetes.rst')) as rst_file:","577","        fdescr = rst_file.read()","578","","582","    return Bunch(data=data, target=target, DESCR=fdescr,"],"delete":["570","    base_dir = join(dirname(__file__), 'data')","577","    return Bunch(data=data, target=target,"]}],"sklearn\/datasets\/tests\/test_base.py":[{"add":["175","    assert_true(res.DESCR)"],"delete":[]}]}},"af412822a44a0bd66d24eb95f7d6b8e9fe0192f7":{"changes":{"sklearn\/ensemble\/bagging.py":"MODIFY","sklearn\/ensemble\/tests\/test_bagging.py":"MODIFY"},"diff":{"sklearn\/ensemble\/bagging.py":[{"add":["610","        oob_score = accuracy_score(y, np.argmax(predictions, axis=1))"],"delete":["610","        oob_score = accuracy_score(y, classes_.take(np.argmax(predictions,","611","                                                              axis=1)))"]}],"sklearn\/ensemble\/tests\/test_bagging.py":[{"add":["725","","726","","727","def test_set_oob_score_label_encoding():","728","    # Make sure the oob_score doesn't change when the labels change","729","    # See: https:\/\/github.com\/scikit-learn\/scikit-learn\/issues\/8933","730","    randState = 5","731","    X = [[-1], [0], [1]] * 5","732","    Y1 = ['A', 'B', 'C'] * 5","733","    Y2 = [-1, 0, 1] * 5","734","    Y3 = [0, 1, 2] * 5","735","    x1 = BaggingClassifier(oob_score=True,","736","                           random_state=randState).fit(X, Y1).oob_score_","737","    x2 = BaggingClassifier(oob_score=True,","738","                           random_state=randState).fit(X, Y2).oob_score_","739","    x3 = BaggingClassifier(oob_score=True,","740","                           random_state=randState).fit(X, Y3).oob_score_","741","    assert_equal([x1, x2], [x3, x3])"],"delete":[]}]}},"c5ccb72d7797eda276eb56aa450501d19be8ddc5":{"changes":{"sklearn\/feature_selection\/univariate_selection.py":"MODIFY"},"diff":{"sklearn\/feature_selection\/univariate_selection.py":[{"add":["476","    mutual_info_regression: Mutual information for a continuous target."],"delete":["476","    mutual_info_regression: Mutual information for a continious target."]}]}},"0b02125b1393d8017649ab3920f1cbaec5dbf12f":{"changes":{"sklearn\/cluster\/hierarchical.py":"MODIFY","sklearn\/cluster\/tests\/test_hierarchical.py":"MODIFY"},"diff":{"sklearn\/cluster\/hierarchical.py":[{"add":["662","                 memory=None,","687","        if memory is None:","688","            memory = Memory(cachedir=None, verbose=0)","689","        elif isinstance(memory, six.string_types):","691","        elif not isinstance(memory, Memory):","692","            raise ValueError('`memory` has to be a `str` or a `joblib.Memory`'","693","                             ' instance')"],"delete":["662","                 memory=Memory(cachedir=None, verbose=0),","687","        if isinstance(memory, six.string_types):"]}],"sklearn\/cluster\/tests\/test_hierarchical.py":[{"add":["117","def test_agglomerative_clustering_wrong_arg_memory():","118","    # Test either if an error is raised when memory is not","119","    # either a str or a joblib.Memory instance","120","    rng = np.random.RandomState(0)","121","    n_samples = 100","122","    X = rng.randn(n_samples, 50)","123","    memory = 5","124","    clustering = AgglomerativeClustering(memory=memory)","125","    assert_raises(ValueError, clustering.fit, X)","126","","127",""],"delete":[]}]}},"bae38a2f5fb59b32a9501279f452178bc3f7f789":{"changes":{"doc\/tutorial\/text_analytics\/working_with_text_data.rst":"MODIFY"},"diff":{"doc\/tutorial\/text_analytics\/working_with_text_data.rst":[{"add":["326","  >>> text_clf.fit(twenty_train.data, twenty_train.target)  # doctest: +ELLIPSIS","327","  Pipeline(...)","356","  >>> text_clf.fit(twenty_train.data, twenty_train.target)  # doctest: +ELLIPSIS","357","  Pipeline(...)"],"delete":["326","  >>> text_clf = text_clf.fit(twenty_train.data, twenty_train.target)","355","  >>> _ = text_clf.fit(twenty_train.data, twenty_train.target)"]}]}},"4493d37058938c85f78b40562e2741812b983291":{"changes":{"sklearn\/base.py":"MODIFY","sklearn\/tests\/test_base.py":"MODIFY","doc\/whats_new.rst":"MODIFY"},"diff":{"sklearn\/base.py":[{"add":["292","        try:","293","            state = super(BaseEstimator, self).__getstate__()","294","        except AttributeError:","295","            state = self.__dict__.copy()","296","","298","            return dict(state.items(), _sklearn_version=__version__)","300","            return state","312","        try:","313","            super(BaseEstimator, self).__setstate__(state)","314","        except AttributeError:","315","            self.__dict__.update(state)","316",""],"delete":["293","            return dict(self.__dict__.items(), _sklearn_version=__version__)","295","            return dict(self.__dict__.items())","307","        self.__dict__.update(state)"]}],"sklearn\/tests\/test_base.py":[{"add":["15","from sklearn.utils.testing import assert_dict_equal","315","def test_pickle_version_warning_is_not_raised_with_matching_version():","316","    iris = datasets.load_iris()","317","    tree = DecisionTreeClassifier().fit(iris.data, iris.target)","318","    tree_pickle = pickle.dumps(tree)","319","    assert_true(b\"version\" in tree_pickle)","320","    tree_restored = assert_no_warnings(pickle.loads, tree_pickle)","321","","322","    # test that we can predict with the restored decision tree classifier","323","    score_of_original = tree.score(iris.data, iris.target)","324","    score_of_restored = tree_restored.score(iris.data, iris.target)","325","    assert_equal(score_of_original, score_of_restored)","333","pickle_error_message = (","334","    \"Trying to unpickle estimator {estimator} from \"","335","    \"version {old_version} when using version \"","336","    \"{current_version}. This might \"","337","    \"lead to breaking code or invalid results. \"","338","    \"Use at your own risk.\")","340","","341","def test_pickle_version_warning_is_issued_upon_different_version():","345","    message = pickle_error_message.format(estimator=\"TreeBadVersion\",","346","                                          old_version=\"something\",","347","                                          current_version=sklearn.__version__)","350","","351","class TreeNoVersion(DecisionTreeClassifier):","352","    def __getstate__(self):","353","        return self.__dict__","354","","355","","356","def test_pickle_version_warning_is_issued_when_no_version_info_in_pickle():","357","    iris = datasets.load_iris()","363","    message = pickle_error_message.format(estimator=\"TreeNoVersion\",","364","                                          old_version=\"pre-0.18\",","365","                                          current_version=sklearn.__version__)","370","","371","def test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator():","372","    iris = datasets.load_iris()","373","    tree = TreeNoVersion().fit(iris.data, iris.target)","374","    tree_pickle_noversion = pickle.dumps(tree)","375","    try:","376","        module_backup = TreeNoVersion.__module__","377","        TreeNoVersion.__module__ = \"notsklearn\"","378","        assert_no_warnings(pickle.loads, tree_pickle_noversion)","379","    finally:","380","        TreeNoVersion.__module__ = module_backup","381","","382","","383","class DontPickleAttributeMixin(object):","384","    def __getstate__(self):","385","        data = self.__dict__.copy()","386","        data[\"_attribute_not_pickled\"] = None","387","        return data","388","","389","    def __setstate__(self, state):","390","        state[\"_restored\"] = True","391","        self.__dict__.update(state)","392","","393","","394","class MultiInheritanceEstimator(BaseEstimator, DontPickleAttributeMixin):","395","    def __init__(self, attribute_pickled=5):","396","        self.attribute_pickled = attribute_pickled","397","        self._attribute_not_pickled = None","398","","399","","400","def test_pickling_when_getstate_is_overwritten_by_mixin():","401","    estimator = MultiInheritanceEstimator()","402","    estimator._attribute_not_pickled = \"this attribute should not be pickled\"","403","","404","    serialized = pickle.dumps(estimator)","405","    estimator_restored = pickle.loads(serialized)","406","    assert_equal(estimator_restored.attribute_pickled, 5)","407","    assert_equal(estimator_restored._attribute_not_pickled, None)","408","    assert_true(estimator_restored._restored)","409","","410","","411","def test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn():","412","    try:","413","        estimator = MultiInheritanceEstimator()","414","        text = \"this attribute should not be pickled\"","415","        estimator._attribute_not_pickled = text","416","        old_mod = type(estimator).__module__","417","        type(estimator).__module__ = \"notsklearn\"","418","","419","        serialized = estimator.__getstate__()","420","        assert_dict_equal(serialized, {'_attribute_not_pickled': None,","421","                                       'attribute_pickled': 5})","422","","423","        serialized['attribute_pickled'] = 4","424","        estimator.__setstate__(serialized)","425","        assert_equal(estimator.attribute_pickled, 4)","426","        assert_true(estimator._restored)","427","    finally:","428","        type(estimator).__module__ = old_mod","429","","430","","431","class SingleInheritanceEstimator(BaseEstimator):","432","    def __init__(self, attribute_pickled=5):","433","        self.attribute_pickled = attribute_pickled","434","        self._attribute_not_pickled = None","435","","436","    def __getstate__(self):","437","        data = self.__dict__.copy()","438","        data[\"_attribute_not_pickled\"] = None","439","        return data","440","","441","","442","def test_pickling_works_when_getstate_is_overwritten_in_the_child_class():","443","    estimator = SingleInheritanceEstimator()","444","    estimator._attribute_not_pickled = \"this attribute should not be pickled\"","445","","446","    serialized = pickle.dumps(estimator)","447","    estimator_restored = pickle.loads(serialized)","448","    assert_equal(estimator_restored.attribute_pickled, 5)","449","    assert_equal(estimator_restored._attribute_not_pickled, None)"],"delete":["3","import sys","4","","316","class TreeNoVersion(DecisionTreeClassifier):","317","    def __getstate__(self):","318","        return self.__dict__","326","def test_pickle_version_warning():","327","    # check that warnings are raised when unpickling in a different version","329","    # first, check no warning when in the same version:","331","    tree = DecisionTreeClassifier().fit(iris.data, iris.target)","332","    tree_pickle = pickle.dumps(tree)","333","    assert_true(b\"version\" in tree_pickle)","334","    assert_no_warnings(pickle.loads, tree_pickle)","335","","336","    # check that warning is raised on different version","339","    message = (\"Trying to unpickle estimator TreeBadVersion from \"","340","               \"version {0} when using version {1}. This might lead to \"","341","               \"breaking code or invalid results. \"","342","               \"Use at your own risk.\".format(\"something\",","343","                                              sklearn.__version__))","346","    # check that not including any version also works:","352","    message = message.replace(\"something\", \"pre-0.18\")","353","    message = message.replace(\"TreeBadVersion\", \"TreeNoVersion\")","358","    # check that no warning is raised for external estimators","359","    TreeNoVersion.__module__ = \"notsklearn\"","360","    assert_no_warnings(pickle.loads, tree_pickle_noversion)"]}],"doc\/whats_new.rst":[{"add":["225","   - Fix a bug where :meth:`sklearn.base.BaseEstimator.__getstate__`","226","     obstructed pickling customizations of child-classes, when used in a","227","     multiple inheritance context.","228","     :issue:`8316` by :user:`Holger Peters <HolgerPeters>`."],"delete":[]}]}},"668a24c9e6e1a541bede64819612fdb5e169a341":{"changes":{"sklearn\/linear_model\/tests\/test_bayes.py":"MODIFY","doc\/whats_new.rst":"MODIFY","sklearn\/linear_model\/bayes.py":"MODIFY"},"diff":{"sklearn\/linear_model\/tests\/test_bayes.py":[{"add":["8","from sklearn.utils.testing import assert_array_almost_equal","9","from sklearn.utils.testing import assert_almost_equal","12","from sklearn.linear_model import Ridge","37","def test_bayesian_ridge_parameter():","38","    # Test correctness of lambda_ and alpha_ parameters (Github issue #8224)","39","    X = np.array([[1, 1], [3, 4], [5, 7], [4, 1], [2, 6], [3, 10], [3, 2]])","40","    y = np.array([1, 2, 3, 2, 0, 4, 5]).T","41","","42","    # A Ridge regression model using an alpha value equal to the ratio of","43","    # lambda_ and alpha_ from the Bayesian Ridge model must be identical","44","    br_model = BayesianRidge(compute_score=True).fit(X, y)","45","    rr_model = Ridge(alpha=br_model.lambda_ \/ br_model.alpha_).fit(X, y)","46","    assert_array_almost_equal(rr_model.coef_, br_model.coef_)","47","    assert_almost_equal(rr_model.intercept_, br_model.intercept_)","48","","49","","80","        return f(X) + np.random.randn(X.shape[0]) * noise_mult"],"delete":["12","from sklearn.utils.testing import assert_array_almost_equal","13","","66","        return f(X) + np.random.randn(X.shape[0])*noise_mult"]}],"doc\/whats_new.rst":[{"add":["246","   - Fix :func:`sklearn.linear_model.BayesianRidge.fit` to return ","247","     ridge parameter `alpha_` and `lambda_` consistent with calculated","248","     coefficients `coef_` and `intercept_`.","249","     :issue:`8224` by :user:`Peter Gedeck <gedeck>`.","250",""],"delete":[]}],"sklearn\/linear_model\/bayes.py":[{"add":["203","            # Preserve the alpha and lambda values that were used to","204","            # calculate the final coefficients","205","            self.alpha_ = alpha_","206","            self.lambda_ = lambda_","207",""],"delete":["231","        self.alpha_ = alpha_","232","        self.lambda_ = lambda_"]}]}},"673baeab9e65231489c73d5e0c8c3f04d44893c3":{"changes":{"sklearn\/__init__.py":"MODIFY"},"diff":{"sklearn\/__init__.py":[{"add":["93","                        module=r'^{0}\\.'.format(re.escape(__name__)))"],"delete":["93","                        module='^{0}\\.'.format(re.escape(__name__)))"]}]}},"9be0922ad25a7deed3798e39a9ee0a39e1e9fc53":{"changes":{"sklearn\/ensemble\/forest.py":"MODIFY"},"diff":{"sklearn\/ensemble\/forest.py":[{"add":["376","# This is a utility function for joblib's Parallel. It can't go locally in","377","# ForestClassifier or ForestRegressor, because joblib complains that it cannot","378","# pickle it when placed there.","379","","380","def accumulate_prediction(predict, X, out):","381","    prediction = predict(X, check_input=False)","382","    if len(out) == 1:","383","        out[0] += prediction","384","    else:","385","        for i in range(len(out)):","386","            out[i] += prediction[i]","387","","388","","580","        # avoid storing the output of every estimator by summing them here","581","        all_proba = [np.zeros((X.shape[0], j), dtype=np.float64)","582","                     for j in np.atleast_1d(self.n_classes_)]","583","        Parallel(n_jobs=n_jobs, verbose=self.verbose, backend=\"threading\")(","584","            delayed(accumulate_prediction)(e.predict_proba, X, all_proba)","587","        for proba in all_proba:","590","        if len(all_proba) == 1:","591","            return all_proba[0]","593","            return all_proba","682","        # avoid storing the output of every estimator by summing them here","683","        if self.n_outputs_ > 1:","684","            y_hat = np.zeros((X.shape[0], self.n_outputs_), dtype=np.float64)","685","        else:","686","            y_hat = np.zeros((X.shape[0]), dtype=np.float64)","687","","689","        Parallel(n_jobs=n_jobs, verbose=self.verbose, backend=\"threading\")(","690","            delayed(accumulate_prediction)(e.predict, X, [y_hat])","693","        y_hat \/= len(self.estimators_)"],"delete":["567","        # Parallel loop","568","        all_proba = Parallel(n_jobs=n_jobs, verbose=self.verbose,","569","                             backend=\"threading\")(","570","            delayed(parallel_helper)(e, 'predict_proba', X,","571","                                      check_input=False)","574","        # Reduce","575","        proba = all_proba[0]","576","","577","        if self.n_outputs_ == 1:","578","            for j in range(1, len(all_proba)):","579","                proba += all_proba[j]","580","","584","            for j in range(1, len(all_proba)):","585","                for k in range(self.n_outputs_):","586","                    proba[k] += all_proba[j][k]","587","","588","            for k in range(self.n_outputs_):","589","                proba[k] \/= self.n_estimators","590","","591","        return proba","681","        all_y_hat = Parallel(n_jobs=n_jobs, verbose=self.verbose,","682","                             backend=\"threading\")(","683","            delayed(parallel_helper)(e, 'predict', X, check_input=False)","686","        # Reduce","687","        y_hat = sum(all_y_hat) \/ len(self.estimators_)"]}]}},"e27242a62d18425886e540c213da044f209d43a8":{"changes":{"sklearn\/manifold\/isomap.py":"MODIFY","doc\/whats_new\/v0.20.rst":"MODIFY","sklearn\/manifold\/tests\/test_isomap.py":"MODIFY","sklearn\/manifold\/locally_linear.py":"MODIFY"},"diff":{"sklearn\/manifold\/isomap.py":[{"add":["102","        X = check_array(X, accept_sparse='csr')"],"delete":["102","        X = check_array(X)"]}],"doc\/whats_new\/v0.20.rst":[{"add":["338","- Support sparse input in :meth:`manifold.Isomap.fit`. :issue:`8554` by","339","  :user:`Leland McInnes <lmcinnes>`.","340",""],"delete":[]}],"sklearn\/manifold\/tests\/test_isomap.py":[{"add":["12","from scipy.sparse import rand as sparse_rand","13","","126","","127","","128","def test_sparse_input():","129","    X = sparse_rand(100, 3, density=0.1, format='csr')","130","","131","    # Should not error","132","    for eigen_solver in eigen_solvers:","133","        for path_method in path_methods:","134","            clf = manifold.Isomap(n_components=2,","135","                                  eigen_solver=eigen_solver,","136","                                  path_method=path_method)","137","            clf.fit(X)"],"delete":[]}],"sklearn\/manifold\/locally_linear.py":[{"add":["71","    X : {array-like, NearestNeighbors}","73","        numpy array or a NearestNeighbors object.","195","    X : {array-like, NearestNeighbors}","197","        numpy array or a NearestNeighbors object."],"delete":["71","    X : {array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}","73","        numpy array, sparse array, precomputed tree, or NearestNeighbors","74","        object.","196","    X : {array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}","198","        numpy array, sparse array, precomputed tree, or NearestNeighbors","199","        object."]}]}},"e3c9ae204ffb152c151e9b61306ff8f16a2c1e0a":{"changes":{"sklearn\/gaussian_process\/gpc.py":"MODIFY","sklearn\/mixture\/bayesian_mixture.py":"MODIFY","sklearn\/random_projection.py":"MODIFY","sklearn\/gaussian_process\/gpr.py":"MODIFY","sklearn\/svm\/classes.py":"MODIFY","sklearn\/metrics\/cluster\/unsupervised.py":"MODIFY","sklearn\/ensemble\/base.py":"MODIFY","sklearn\/linear_model\/passive_aggressive.py":"MODIFY","sklearn\/model_selection\/_search.py":"MODIFY","sklearn\/linear_model\/ransac.py":"MODIFY","sklearn\/mixture\/gmm.py":"MODIFY","sklearn\/cross_validation.py":"MODIFY","sklearn\/datasets\/olivetti_faces.py":"MODIFY","sklearn\/linear_model\/logistic.py":"MODIFY","sklearn\/utils\/__init__.py":"MODIFY","sklearn\/cluster\/mean_shift_.py":"MODIFY","sklearn\/model_selection\/_split.py":"MODIFY","sklearn\/linear_model\/perceptron.py":"MODIFY","sklearn\/neighbors\/kde.py":"MODIFY","sklearn\/feature_selection\/mutual_info_.py":"MODIFY","sklearn\/svm\/base.py":"MODIFY","sklearn\/multiclass.py":"MODIFY","sklearn\/linear_model\/randomized_l1.py":"MODIFY","sklearn\/grid_search.py":"MODIFY","sklearn\/mixture\/gaussian_mixture.py":"MODIFY","sklearn\/decomposition\/factor_analysis.py":"MODIFY","sklearn\/linear_model\/coordinate_descent.py":"MODIFY","sklearn\/decomposition\/online_lda.py":"MODIFY","sklearn\/manifold\/mds.py":"MODIFY","sklearn\/linear_model\/sag.py":"MODIFY","sklearn\/cluster\/spectral.py":"MODIFY","sklearn\/decomposition\/nmf.py":"MODIFY","sklearn\/covariance\/robust_covariance.py":"MODIFY","sklearn\/decomposition\/fastica_.py":"MODIFY","sklearn\/kernel_approximation.py":"MODIFY","sklearn\/manifold\/spectral_embedding_.py":"MODIFY","sklearn\/utils\/extmath.py":"MODIFY","sklearn\/feature_extraction\/image.py":"MODIFY","sklearn\/neural_network\/multilayer_perceptron.py":"MODIFY","sklearn\/decomposition\/pca.py":"MODIFY","sklearn\/linear_model\/ridge.py":"MODIFY","sklearn\/linear_model\/theil_sen.py":"MODIFY","sklearn\/decomposition\/truncated_svd.py":"MODIFY","sklearn\/datasets\/samples_generator.py":"MODIFY","sklearn\/gaussian_process\/gaussian_process.py":"MODIFY","sklearn\/cluster\/bicluster.py":"MODIFY","sklearn\/linear_model\/stochastic_gradient.py":"MODIFY","sklearn\/model_selection\/_validation.py":"MODIFY","sklearn\/decomposition\/dict_learning.py":"MODIFY","sklearn\/ensemble\/gradient_boosting.py":"MODIFY","sklearn\/dummy.py":"MODIFY","sklearn\/manifold\/t_sne.py":"MODIFY","sklearn\/decomposition\/sparse_pca.py":"MODIFY","sklearn\/manifold\/locally_linear.py":"MODIFY","sklearn\/decomposition\/kernel_pca.py":"MODIFY","sklearn\/cluster\/k_means_.py":"MODIFY"},"diff":{"sklearn\/gaussian_process\/gpc.py":[{"add":["108","    random_state : int, RandomState instance or None, optional (default: None)","109","        The generator used to initialize the centers. If int, random_state is","110","        the seed used by the random number generator; If RandomState instance,","111","        random_state is the random number generator; If None, the random number","112","        generator is the RandomState instance used by `np.random`.","513","    random_state : int, RandomState instance or None, optional (default: None)","514","        The generator used to initialize the centers.","515","        If int, random_state is the seed used by the random number generator;","516","        If RandomState instance, random_state is the random number generator;","517","        If None, the random number generator is the RandomState instance used","518","        by `np.random`."],"delete":["108","    random_state : integer or numpy.RandomState, optional","109","        The generator used to initialize the centers. If an integer is","110","        given, it fixes the seed. Defaults to the global numpy random","111","        number generator.","512","    random_state : integer or numpy.RandomState, optional","513","        The generator used to initialize the centers. If an integer is","514","        given, it fixes the seed. Defaults to the global numpy random","515","        number generator."]}],"sklearn\/mixture\/bayesian_mixture.py":[{"add":["165","    random_state : int, RandomState instance or None, optional (default=None)","166","        If int, random_state is the seed used by the random number generator;","167","        If RandomState instance, random_state is the random number generator;","168","        If None, the random number generator is the RandomState instance used","169","        by `np.random`."],"delete":["165","    random_state : RandomState or an int seed, defaults to None.","166","        A random number generator instance."]}],"sklearn\/random_projection.py":[{"add":["156","    \"\"\"Generate a dense Gaussian random matrix.","172","    random_state : int, RandomState instance or None, optional (default=None)","173","        Control the pseudo random number generator used to generate the matrix","174","        at fit time.  If int, random_state is the seed used by the random","175","        number generator; If RandomState instance, random_state is the random","176","        number generator; If None, the random number generator is the","177","        RandomState instance used by `np.random`.","231","    random_state : int, RandomState instance or None, optional (default=None)","232","        Control the pseudo random number generator used to generate the matrix","233","        at fit time.  If int, random_state is the seed used by the random","234","        number generator; If RandomState instance, random_state is the random","235","        number generator; If None, the random number generator is the","236","        RandomState instance used by `np.random`.","454","    random_state : int, RandomState instance or None, optional (default=None)","455","        Control the pseudo random number generator used to generate the matrix","456","        at fit time.  If int, random_state is the seed used by the random","457","        number generator; If RandomState instance, random_state is the random","458","        number generator; If None, the random number generator is the","459","        RandomState instance used by `np.random`.","563","    random_state : int, RandomState instance or None, optional (default=None)","564","        Control the pseudo random number generator used to generate the matrix","565","        at fit time.  If int, random_state is the seed used by the random","566","        number generator; If RandomState instance, random_state is the random","567","        number generator; If None, the random number generator is the","568","        RandomState instance used by `np.random`."],"delete":["156","    \"\"\" Generate a dense Gaussian random matrix.","172","    random_state : int, RandomState instance or None (default=None)","173","        Control the pseudo random number generator used to generate the","174","        matrix at fit time.","228","    random_state : integer, RandomState instance or None (default=None)","229","        Control the pseudo random number generator used to generate the","230","        matrix at fit time.","448","    random_state : integer, RandomState instance or None (default=None)","449","        Control the pseudo random number generator used to generate the","450","        matrix at fit time.","554","    random_state : integer, RandomState instance or None (default=None)","555","        Control the pseudo random number generator used to generate the","556","        matrix at fit time."]}],"sklearn\/gaussian_process\/gpr.py":[{"add":["105","    random_state : int, RandomState instance or None, optional (default: None)","106","        The generator used to initialize the centers. If int, random_state is","107","        the seed used by the random number generator; If RandomState instance,","108","        random_state is the random number generator; If None, the random number","109","        generator is the RandomState instance used by `np.random`.","339","        random_state : int, RandomState instance or None, optional (default=0)","340","            If int, random_state is the seed used by the random number","341","            generator; If RandomState instance, random_state is the","342","            random number generator; If None, the random number","343","            generator is the RandomState instance used by `np.random`."],"delete":["105","    random_state : integer or numpy.RandomState, optional","106","        The generator used to initialize the centers. If an integer is","107","        given, it fixes the seed. Defaults to the global numpy random","108","        number generator.","338","        random_state : RandomState or an int seed (0 by default)","339","            A random number generator instance"]}],"sklearn\/svm\/classes.py":[{"add":["88","    random_state : int, RandomState instance or None, optional (default=None)","89","        The seed of the pseudo random number generator to use when shuffling","90","        the data.  If int, random_state is the seed used by the random number","91","        generator; If RandomState instance, random_state is the random number","92","        generator; If None, the random number generator is the RandomState","93","        instance used by `np.random`.","282","    random_state : int, RandomState instance or None, optional (default=None)","283","        The seed of the pseudo random number generator to use when shuffling","284","        the data.  If int, random_state is the seed used by the random number","285","        generator; If RandomState instance, random_state is the random number","286","        generator; If None, the random number generator is the RandomState","287","        instance used by `np.random`.","476","    random_state : int, RandomState instance or None, optional (default=None)","477","        The seed of the pseudo random number generator to use when shuffling","478","        the data.  If int, random_state is the seed used by the random number","479","        generator; If RandomState instance, random_state is the random number","480","        generator; If None, the random number generator is the RandomState","481","        instance used by `np.random`.","632","    random_state : int, RandomState instance or None, optional (default=None)","633","        The seed of the pseudo random number generator to use when shuffling","634","        the data.  If int, random_state is the seed used by the random number","635","        generator; If RandomState instance, random_state is the random number","636","        generator; If None, the random number generator is the RandomState","637","        instance used by `np.random`.","986","    random_state : int, RandomState instance or None, optional (default=None)","987","        The seed of the pseudo random number generator to use when shuffling","988","        the data.  If int, random_state is the seed used by the random number","989","        generator; If RandomState instance, random_state is the random number","990","        generator; If None, the random number generator is the RandomState","991","        instance used by `np.random`."],"delete":["88","    random_state : int seed, RandomState instance, or None (default=None)","89","        The seed of the pseudo random number generator to use when","90","        shuffling the data.","279","    random_state : int seed, RandomState instance, or None (default=None)","280","        The seed of the pseudo random number generator to use when","281","        shuffling the data.","470","    random_state : int seed, RandomState instance, or None (default)","471","        The seed of the pseudo random number generator to use when","472","        shuffling the data for probability estimation.","623","    random_state : int seed, RandomState instance, or None (default)","624","        The seed of the pseudo random number generator to use when","625","        shuffling the data for probability estimation.","974","    random_state : int seed, RandomState instance, or None (default)","975","        The seed of the pseudo random number generator to use when","976","        shuffling the data for probability estimation."]}],"sklearn\/metrics\/cluster\/unsupervised.py":[{"add":["64","    random_state : int, RandomState instance or None, optional (default=None)","65","        The generator used to randomly select a subset of samples.  If int,","66","        random_state is the seed used by the random number generator; If","67","        RandomState instance, random_state is the random number generator; If","68","        None, the random number generator is the RandomState instance used by","69","        `np.random`. Used when ``sample_size is not None``."],"delete":["64","    random_state : integer or numpy.RandomState, optional","65","        The generator used to randomly select a subset of samples if","66","        ``sample_size is not None``. If an integer is given, it fixes the seed.","67","        Defaults to the global numpy random number generator."]}],"sklearn\/ensemble\/base.py":[{"add":["31","    random_state : int, RandomState instance or None, optional (default=None)","32","        If int, random_state is the seed used by the random number generator;","33","        If RandomState instance, random_state is the random number generator;","34","        If None, the random number generator is the RandomState instance used","35","        by `np.random`."],"delete":["31","    random_state : numpy.RandomState or int, optional","32","        Random state used to generate integer values."]}],"sklearn\/linear_model\/passive_aggressive.py":[{"add":["30","    random_state : int, RandomState instance or None, optional, default=None","31","        The seed of the pseudo random number generator to use when shuffling","32","        the data.  If int, random_state is the seed used by the random number","33","        generator; If RandomState instance, random_state is the random number","34","        generator; If None, the random number generator is the RandomState","35","        instance used by `np.random`.","209","    random_state : int, RandomState instance or None, optional, default=None","210","        The seed of the pseudo random number generator to use when shuffling","211","        the data.  If int, random_state is the seed used by the random number","212","        generator; If RandomState instance, random_state is the random number","213","        generator; If None, the random number generator is the RandomState","214","        instance used by `np.random`."],"delete":["30","    random_state : int seed, RandomState instance, or None (default)","31","        The seed of the pseudo random number generator to use when","32","        shuffling the data.","206","    random_state : int seed, RandomState instance, or None (default)","207","        The seed of the pseudo random number generator to use when","208","        shuffling the data."]}],"sklearn\/model_selection\/_search.py":[{"add":["194","    random_state : int, RandomState instance or None, optional (default=None)","197","        If int, random_state is the seed used by the random number generator;","198","        If RandomState instance, random_state is the random number generator;","199","        If None, the random number generator is the RandomState instance used","200","        by `np.random`.","1060","    random_state : int, RandomState instance or None, optional, default=None","1063","        If int, random_state is the seed used by the random number generator;","1064","        If RandomState instance, random_state is the random number generator;","1065","        If None, the random number generator is the RandomState instance used","1066","        by `np.random`."],"delete":["194","    random_state : int or RandomState","1056","    random_state : int or RandomState"]}],"sklearn\/linear_model\/ransac.py":[{"add":["160","    random_state : int, RandomState instance or None, optional, default None","161","        The generator used to initialize the centers.  If int, random_state is","162","        the seed used by the random number generator; If RandomState instance,","163","        random_state is the random number generator; If None, the random number","164","        generator is the RandomState instance used by `np.random`."],"delete":["160","    random_state : integer or numpy.RandomState, optional","161","        The generator used to initialize the centers. If an integer is","162","        given, it fixes the seed. Defaults to the global numpy random","163","        number generator."]}],"sklearn\/mixture\/gmm.py":[{"add":["154","    random_state : int, RandomState instance or None, optional (default=None)","155","        If int, random_state is the seed used by the random number generator;","156","        If RandomState instance, random_state is the random number generator;","157","        If None, the random number generator is the RandomState instance used","158","        by `np.random`."],"delete":["154","    random_state : RandomState or an int seed (None by default)","155","        A random number generator instance"]}],"sklearn\/cross_validation.py":[{"add":["298","    random_state : int, RandomState instance or None, optional, default=None","299","        If int, random_state is the seed used by the random number","300","        generator; If RandomState instance, random_state is the random number","301","        generator; If None, the random number generator is the RandomState","302","        instance used by `np.random`. Used when ``shuffle`` == True.","502","    random_state : int, RandomState instance or None, optional, default=None","503","        If int, random_state is the seed used by the random number","504","        generator; If RandomState instance, random_state is the random number","505","        generator; If None, the random number generator is the RandomState","506","        instance used by `np.random`. Used when ``shuffle`` == True.","827","    random_state : int, RandomState instance or None, optional (default None)","828","        If int, random_state is the seed used by the random number generator;","829","        If RandomState instance, random_state is the random number generator;","830","        If None, the random number generator is the RandomState instance used","831","        by `np.random`.","1039","    random_state : int, RandomState instance or None, optional (default None)","1040","        If int, random_state is the seed used by the random number generator;","1041","        If RandomState instance, random_state is the random number generator;","1042","        If None, the random number generator is the RandomState instance used","1043","        by `np.random`.","1236","    random_state : int, RandomState instance or None, optional (default None)","1237","        If int, random_state is the seed used by the random number generator;","1238","        If RandomState instance, random_state is the random number generator;","1239","        If None, the random number generator is the RandomState instance used","1240","        by `np.random`.","1903","    random_state : int, RandomState instance or None, optional (default=0)","1904","        If int, random_state is the seed used by the random number generator;","1905","        If RandomState instance, random_state is the random number generator;","1906","        If None, the random number generator is the RandomState instance used","1907","        by `np.random`.","1993","    random_state : int, RandomState instance or None, optional (default=None)","1994","        If int, random_state is the seed used by the random number generator;","1995","        If RandomState instance, random_state is the random number generator;","1996","        If None, the random number generator is the RandomState instance used","1997","        by `np.random`."],"delete":["0","","299","    random_state : None, int or RandomState","300","        When shuffle=True, pseudo-random number generator state used for","301","        shuffling. If None, use default numpy RNG for shuffling.","501","    random_state : None, int or RandomState","502","        When shuffle=True, pseudo-random number generator state used for","503","        shuffling. If None, use default numpy RNG for shuffling.","824","    random_state : int or RandomState","825","        Pseudo-random number generator state used for random sampling.","1033","    random_state : int or RandomState","1034","        Pseudo-random number generator state used for random sampling.","1227","    random_state : int or RandomState","1228","        Pseudo-random number generator state used for random sampling.","1891","    random_state : RandomState or an int seed (0 by default)","1892","        A random number generator instance to define the state of the","1893","        random permutations generator.","1979","    random_state : int or RandomState","1980","        Pseudo-random number generator state used for random sampling."]}],"sklearn\/datasets\/olivetti_faces.py":[{"add":["73","    random_state : int, RandomState instance or None, optional (default=0)","74","        If int, random_state is the seed used by the random number generator;","75","        If RandomState instance, random_state is the random number generator;","76","        If None, the random number generator is the RandomState instance used","77","        by `np.random`."],"delete":["73","    random_state : optional, integer or RandomState object","74","        The seed or the random number generator used to shuffle the","75","        data."]}],"sklearn\/linear_model\/logistic.py":[{"add":["545","    random_state : int, RandomState instance or None, optional, default None","546","        The seed of the pseudo random number generator to use when shuffling","547","        the data.  If int, random_state is the seed used by the random number","548","        generator; If RandomState instance, random_state is the random number","549","        generator; If None, the random number generator is the RandomState","550","        instance used by `np.random`. Used when ``solver`` == 'sag' or","551","        'liblinear'.","866","    random_state : int, RandomState instance or None, optional, default None","867","        The seed of the pseudo random number generator to use when shuffling","868","        the data.  If int, random_state is the seed used by the random number","869","        generator; If RandomState instance, random_state is the random number","870","        generator; If None, the random number generator is the RandomState","871","        instance used by `np.random`. Used when ``solver`` == 'sag' and","872","        'liblinear'.","1034","    random_state : int, RandomState instance or None, optional, default: None","1035","        The seed of the pseudo random number generator to use when shuffling","1036","        the data.  If int, random_state is the seed used by the random number","1037","        generator; If RandomState instance, random_state is the random number","1038","        generator; If None, the random number generator is the RandomState","1039","        instance used by `np.random`. Used when ``solver`` == 'sag' or","1040","        'liblinear'.","1484","    random_state : int, RandomState instance or None, optional, default None","1485","        If int, random_state is the seed used by the random number generator;","1486","        If RandomState instance, random_state is the random number generator;","1487","        If None, the random number generator is the RandomState instance used","1488","        by `np.random`."],"delete":["545","    random_state : int seed, RandomState instance, or None (default)","546","        The seed of the pseudo random number generator to use when","547","        shuffling the data. Used only in solvers 'sag' and 'liblinear'.","862","    random_state : int seed, RandomState instance, or None (default)","863","        The seed of the pseudo random number generator to use when","864","        shuffling the data. Used only in solvers 'sag' and 'liblinear'.","1026","    random_state : int seed, RandomState instance, default: None","1027","        The seed of the pseudo random number generator to use when","1028","        shuffling the data. Used only in solvers 'sag' and 'liblinear'.","1472","    random_state : int seed, RandomState instance, or None (default)","1473","        The seed of the pseudo random number generator to use when","1474","        shuffling the data."]}],"sklearn\/utils\/__init__.py":[{"add":["177","    random_state : int, RandomState instance or None, optional (default=None)","178","        The seed of the pseudo random number generator to use when shuffling","179","        the data.  If int, random_state is the seed used by the random number","180","        generator; If RandomState instance, random_state is the random number","181","        generator; If None, the random number generator is the RandomState","182","        instance used by `np.random`.","277","    random_state : int, RandomState instance or None, optional (default=None)","278","        The seed of the pseudo random number generator to use when shuffling","279","        the data.  If int, random_state is the seed used by the random number","280","        generator; If RandomState instance, random_state is the random number","281","        generator; If None, the random number generator is the RandomState","282","        instance used by `np.random`."],"delete":["177","    random_state : int or RandomState instance","178","        Control the shuffling for reproducible behavior.","273","    random_state : int or RandomState instance","274","        Control the shuffling for reproducible behavior."]}],"sklearn\/cluster\/mean_shift_.py":[{"add":["49","    random_state : int, RandomState instance or None, optional (default=None)","50","        If int, random_state is the seed used by the random number generator;","51","        If RandomState instance, random_state is the random number generator;","52","        If None, the random number generator is the RandomState instance used","53","        by `np.random`."],"delete":["49","    random_state : int or RandomState","50","        Pseudo-random number generator state used for random sampling."]}],"sklearn\/model_selection\/_split.py":[{"add":["366","    random_state : int, RandomState instance or None, optional, default=None","367","        If int, random_state is the seed used by the random number generator;","368","        If RandomState instance, random_state is the random number generator;","369","        If None, the random number generator is the RandomState instance used","370","        by `np.random`. Used when ``shuffle`` == True.","535","    random_state : int, RandomState instance or None, optional, default=None","536","        If int, random_state is the seed used by the random number generator;","537","        If RandomState instance, random_state is the random number generator;","538","        If None, the random number generator is the RandomState instance used","539","        by `np.random`. Used when ``shuffle`` == True.","940","    random_state : int, RandomState instance or None, optional, default=None","941","        If int, random_state is the seed used by the random number generator;","942","        If RandomState instance, random_state is the random number generator;","943","        If None, the random number generator is the RandomState instance used","944","        by `np.random`.","1015","    random_state : int, RandomState instance or None, optional, default=None","1016","        If int, random_state is the seed used by the random number generator;","1017","        If RandomState instance, random_state is the random number generator;","1018","        If None, the random number generator is the RandomState instance used","1019","        by `np.random`.","1190","    random_state : int, RandomState instance or None, optional (default=None)","1191","        If int, random_state is the seed used by the random number generator;","1192","        If RandomState instance, random_state is the random number generator;","1193","        If None, the random number generator is the RandomState instance used","1194","        by `np.random`.","1275","    random_state : int, RandomState instance or None, optional (default=None)","1276","        If int, random_state is the seed used by the random number generator;","1277","        If RandomState instance, random_state is the random number generator;","1278","        If None, the random number generator is the RandomState instance used","1279","        by `np.random`.","1280","","1406","    random_state : int, RandomState instance or None, optional (default=None)","1407","        If int, random_state is the seed used by the random number generator;","1408","        If RandomState instance, random_state is the random number generator;","1409","        If None, the random number generator is the RandomState instance used","1410","        by `np.random`.","1411","","1816","    random_state : int, RandomState instance or None, optional (default=None)","1817","        If int, random_state is the seed used by the random number generator;","1818","        If RandomState instance, random_state is the random number generator;","1819","        If None, the random number generator is the RandomState instance used","1820","        by `np.random`."],"delete":["366","    random_state : None, int or RandomState","367","        When shuffle=True, pseudo-random number generator state used for","368","        shuffling. If None, use default numpy RNG for shuffling.","533","    random_state : None, int or RandomState","534","        When shuffle=True, pseudo-random number generator state used for","535","        shuffling. If None, use default numpy RNG for shuffling.","936","    random_state : None, int or RandomState, default=None","937","        Random state to be used to generate random state for each","938","        repetition.","1009","    random_state : None, int or RandomState, default=None","1010","        Random state to be used to generate random state for each","1011","        repetition.","1182","    random_state : int or RandomState","1183","        Pseudo-random number generator state used for random sampling.","1264","    random_state : int or RandomState","1265","        Pseudo-random number generator state used for random sampling.","1391","    random_state : int or RandomState","1392","        Pseudo-random number generator state used for random sampling.","1797","    random_state : int or RandomState","1798","        Pseudo-random number generator state used for random sampling."]}],"sklearn\/linear_model\/perceptron.py":[{"add":["32","    random_state : int, RandomState instance or None, optional, default None","33","        The seed of the pseudo random number generator to use when shuffling","34","        the data.  If int, random_state is the seed used by the random number","35","        generator; If RandomState instance, random_state is the random number","36","        generator; If None, the random number generator is the RandomState","37","        instance used by `np.random`."],"delete":["32","    random_state : int seed, RandomState instance, or None (default)","33","        The seed of the pseudo random number generator to use when","34","        shuffling the data."]}],"sklearn\/neighbors\/kde.py":[{"add":["186","        random_state : int, RandomState instance or None. default to None","187","            If int, random_state is the seed used by the random number","188","            generator; If RandomState instance, random_state is the random","189","            number generator; If None, the random number generator is the","190","            RandomState instance used by `np.random`."],"delete":["186","        random_state : RandomState or an int seed (0 by default)","187","            A random number generator instance."]}],"sklearn\/feature_selection\/mutual_info_.py":[{"add":["226","    random_state : int, RandomState instance or None, optional, default None","228","        to continuous variables in order to remove repeated values.  If int,","229","        random_state is the seed used by the random number generator; If","230","        RandomState instance, random_state is the random number generator; If","231","        None, the random number generator is the RandomState instance used by","232","        `np.random`.","333","    random_state : int, RandomState instance or None, optional, default None","336","        If int, random_state is the seed used by the random number generator;","337","        If RandomState instance, random_state is the random number generator;","338","        If None, the random number generator is the RandomState instance used","339","        by `np.random`.","412","    random_state : int, RandomState instance or None, optional, default None","414","        to continuous variables in order to remove repeated values.  If int,","415","        random_state is the seed used by the random number generator; If","416","        RandomState instance, random_state is the random number generator; If","417","        None, the random number generator is the RandomState instance used by","418","        `np.random`."],"delete":["226","    random_state : int seed, RandomState instance or None, default None","228","        to continuous variables in order to remove repeated values.","329","    random_state : int seed, RandomState instance or None, default None","404","    random_state : int seed, RandomState instance or None, default None","406","        to continuous variables in order to remove repeated values."]}],"sklearn\/svm\/base.py":[{"add":["806","    random_state : int, RandomState instance or None, optional (default=None)","807","        The seed of the pseudo random number generator to use when shuffling","808","        the data.  If int, random_state is the seed used by the random number","809","        generator; If RandomState instance, random_state is the random number","810","        generator; If None, the random number generator is the RandomState","811","        instance used by `np.random`.","812",""],"delete":["806","    random_state : int seed, RandomState instance, or None (default)","807","        The seed of the pseudo random number generator to use when","808","        shuffling the data."]}],"sklearn\/multiclass.py":[{"add":["642","    random_state : int, RandomState instance or None, optional, default: None","643","        The generator used to initialize the codebook.  If int, random_state is","644","        the seed used by the random number generator; If RandomState instance,","645","        random_state is the random number generator; If None, the random number","646","        generator is the RandomState instance used by `np.random`."],"delete":["642","    random_state : numpy.RandomState, optional","643","        The generator used to initialize the codebook. Defaults to","644","        numpy.random."]}],"sklearn\/linear_model\/randomized_l1.py":[{"add":["577","    random_state : int, RandomState instance or None, optional, default=None","578","        The generator used to randomize the design.  If int, random_state is","579","        the seed used by the random number generator; If RandomState instance,","580","        random_state is the random number generator; If None, the random number","581","        generator is the RandomState instance used by `np.random`."],"delete":["577","    random_state : integer or numpy.random.RandomState, optional","578","        The generator used to randomize the design."]}],"sklearn\/grid_search.py":[{"add":["202","    random_state : int, RandomState instance or None, optional (default=None)","205","        If int, random_state is the seed used by the random number generator;","206","        If RandomState instance, random_state is the random number generator;","207","        If None, the random number generator is the RandomState instance used","208","        by `np.random`.","960","    random_state : int, RandomState instance or None, optional, default=None","963","        If int, random_state is the seed used by the random number generator;","964","        If RandomState instance, random_state is the random number generator;","965","        If None, the random number generator is the RandomState instance used","966","        by `np.random`."],"delete":["202","    random_state : int or RandomState","956","    random_state : int or RandomState"]}],"sklearn\/mixture\/gaussian_mixture.py":[{"add":["502","    random_state : int, RandomState instance or None, optional (default=None)","503","        If int, random_state is the seed used by the random number generator;","504","        If RandomState instance, random_state is the random number generator;","505","        If None, the random number generator is the RandomState instance used","506","        by `np.random`."],"delete":["502","    random_state : RandomState or an int seed, defaults to None.","503","        A random number generator instance."]}],"sklearn\/decomposition\/factor_analysis.py":[{"add":["90","    random_state : int, RandomState instance or None, optional (default=0)","91","        If int, random_state is the seed used by the random number generator;","92","        If RandomState instance, random_state is the random number generator;","93","        If None, the random number generator is the RandomState instance used","94","        by `np.random`. Only used when ``svd_method`` equals 'randomized'."],"delete":["90","    random_state : int or RandomState","91","        Pseudo number generator state used for random sampling. Only used","92","        if ``svd_method`` equals 'randomized'"]}],"sklearn\/linear_model\/coordinate_descent.py":[{"add":["584","    random_state : int, RandomState instance or None, optional, default None","585","        The seed of the pseudo random number generator that selects a random","586","        feature to update.  If int, random_state is the seed used by the random","587","        number generator; If RandomState instance, random_state is the random","588","        number generator; If None, the random number generator is the","589","        RandomState instance used by `np.random`. Used when ``selection`` ==","834","    random_state : int, RandomState instance or None, optional, default None","835","        The seed of the pseudo random number generator that selects a random","836","        feature to update.  If int, random_state is the seed used by the random","837","        number generator; If RandomState instance, random_state is the random","838","        number generator; If None, the random number generator is the","839","        RandomState instance used by `np.random`. Used when ``selection`` ==","1274","    random_state : int, RandomState instance or None, optional, default None","1275","        The seed of the pseudo random number generator that selects a random","1276","        feature to update.  If int, random_state is the seed used by the random","1277","        number generator; If RandomState instance, random_state is the random","1278","        number generator; If None, the random number generator is the","1279","        RandomState instance used by `np.random`. Used when ``selection`` ==","1429","    random_state : int, RandomState instance or None, optional, default None","1430","        The seed of the pseudo random number generator that selects a random","1431","        feature to update.  If int, random_state is the seed used by the random","1432","        number generator; If RandomState instance, random_state is the random","1433","        number generator; If None, the random number generator is the","1434","        RandomState instance used by `np.random`. Used when ``selection`` ==","1602","    random_state : int, RandomState instance or None, optional, default None","1603","        The seed of the pseudo random number generator that selects a random","1604","        feature to update.  If int, random_state is the seed used by the random","1605","        number generator; If RandomState instance, random_state is the random","1606","        number generator; If None, the random number generator is the","1607","        RandomState instance used by `np.random`. Used when ``selection`` ==","1789","    random_state : int, RandomState instance or None, optional, default None","1790","        The seed of the pseudo random number generator that selects a random","1791","        feature to update.  If int, random_state is the seed used by the random","1792","        number generator; If RandomState instance, random_state is the random","1793","        number generator; If None, the random number generator is the","1794","        RandomState instance used by `np.random`. Used when ``selection`` ==","1945","    random_state : int, RandomState instance or None, optional, default None","1946","        The seed of the pseudo random number generator that selects a random","1947","        feature to update.  If int, random_state is the seed used by the random","1948","        number generator; If RandomState instance, random_state is the random","1949","        number generator; If None, the random number generator is the","1950","        RandomState instance used by `np.random`. Used when ``selection`` ==","2112","    random_state : int, RandomState instance or None, optional, default None","2113","        The seed of the pseudo random number generator that selects a random","2114","        feature to update.  If int, random_state is the seed used by the random","2115","        number generator; If RandomState instance, random_state is the random","2116","        number generator; If None, the random number generator is the","2117","        RandomState instance used by `np.random`. Used when ``selection`` ==","2118","        'random'\/"],"delete":["584","    random_state : int, RandomState instance, or None (default)","585","        The seed of the pseudo random number generator that selects","586","        a random feature to update. Useful only when selection is set to","831","    random_state : int, RandomState instance, or None (default)","832","        The seed of the pseudo random number generator that selects","833","        a random feature to update. Useful only when selection is set to","1268","    random_state : int, RandomState instance, or None (default)","1269","        The seed of the pseudo random number generator that selects","1270","        a random feature to update. Useful only when selection is set to","1420","    random_state : int, RandomState instance, or None (default)","1421","        The seed of the pseudo random number generator that selects","1422","        a random feature to update. Useful only when selection is set to","1590","    random_state : int, RandomState instance, or None (default)","1591","        The seed of the pseudo random number generator that selects","1592","        a random feature to update. Useful only when selection is set to","1774","    random_state : int, RandomState instance, or None (default)","1775","        The seed of the pseudo random number generator that selects","1776","        a random feature to update. Useful only when selection is set to","1927","    random_state : int, RandomState instance, or None (default)","1928","        The seed of the pseudo random number generator that selects","1929","        a random feature to update. Useful only when selection is set to","2091","    random_state : int, RandomState instance, or None (default)","2092","        The seed of the pseudo random number generator that selects","2093","        a random feature to update. Useful only when selection is set to","2094","        'random'."]}],"sklearn\/decomposition\/online_lda.py":[{"add":["221","    random_state : int, RandomState instance or None, optional (default=None)","222","        If int, random_state is the seed used by the random number generator;","223","        If RandomState instance, random_state is the random number generator;","224","        If None, the random number generator is the RandomState instance used","225","        by `np.random`."],"delete":["221","    random_state : int or RandomState instance or None, optional (default=None)","222","        Pseudo-random number generator seed control."]}],"sklearn\/manifold\/mds.py":[{"add":["21","    \"\"\"Computes multidimensional scaling using SMACOF algorithm","51","    random_state : int, RandomState instance or None, optional, default: None","52","        The generator used to initialize the centers.  If int, random_state is","53","        the seed used by the random number generator; If RandomState instance,","54","        random_state is the random number generator; If None, the random number","55","        generator is the RandomState instance used by `np.random`.","136","    \"\"\"Computes multidimensional scaling using the SMACOF algorithm.","199","    random_state : int, RandomState instance or None, optional, default: None","200","        The generator used to initialize the centers.  If int, random_state is","201","        the seed used by the random number generator; If RandomState instance,","202","        random_state is the random number generator; If None, the random number","203","        generator is the RandomState instance used by `np.random`.","316","    random_state : int, RandomState instance or None, optional, default: None","317","        The generator used to initialize the centers.  If int, random_state is","318","        the seed used by the random number generator; If RandomState instance,","319","        random_state is the random number generator; If None, the random number","320","        generator is the RandomState instance used by `np.random`."],"delete":["21","    \"\"\"","22","    Computes multidimensional scaling using SMACOF algorithm","52","    random_state : integer or numpy.RandomState, optional","53","        The generator used to initialize the centers. If an integer is","54","        given, it fixes the seed. Defaults to the global numpy random","55","        number generator.","136","    \"\"\"","137","    Computes multidimensional scaling using the SMACOF algorithm.","200","    random_state : integer or numpy.RandomState, optional, default: None","201","        The generator used to initialize the centers. If an integer is given,","202","        it fixes the seed. Defaults to the global numpy random number","203","        generator.","316","    random_state : integer or numpy.RandomState, optional, default: None","317","        The generator used to initialize the centers. If an integer is given,","318","        it fixes the seed. Defaults to the global numpy random number","319","        generator."]}],"sklearn\/linear_model\/sag.py":[{"add":["146","    random_state : int, RandomState instance or None, optional, default None","147","        The seed of the pseudo random number generator to use when shuffling","148","        the data.  If int, random_state is the seed used by the random number","149","        generator; If RandomState instance, random_state is the random number","150","        generator; If None, the random number generator is the RandomState","151","        instance used by `np.random`."],"delete":["146","    random_state : int seed, RandomState instance, or None (default)","147","        The seed of the pseudo random number generator to use when","148","        shuffling the data."]}],"sklearn\/cluster\/spectral.py":[{"add":["41","    random_state : int, RandomState instance or None, optional, default: None","42","        If int, random_state is the seed used by the random number generator;","43","        If RandomState instance, random_state is the random number generator;","44","        If None, the random number generator is the RandomState instance used","45","        by `np.random`.","198","    random_state : int, RandomState instance or None, optional, default: None","199","        A pseudo random number generator used for the initialization of the","200","        lobpcg eigen vectors decomposition when eigen_solver == 'amg' and by","201","        the K-Means initialization. If int, random_state is the seed used by","202","        the random number generator; If RandomState instance, random_state is","203","        the random number generator; If None, the random number generator is","204","        the RandomState instance used by `np.random`.","333","    random_state : int, RandomState instance or None, optional, default: None","334","        A pseudo random number generator used for the initialization of the","335","        lobpcg eigen vectors decomposition when eigen_solver == 'amg' and by","336","        the K-Means initialization.  If int, random_state is the seed used by","337","        the random number generator; If RandomState instance, random_state is","338","        the random number generator; If None, the random number generator is","339","        the RandomState instance used by `np.random`."],"delete":["41","    random_state : int seed, RandomState instance, or None (default)","42","        A pseudo random number generator used for the initialization of the","43","        of the rotation matrix","196","    random_state : int seed, RandomState instance, or None (default)","197","        A pseudo random number generator used for the initialization","198","        of the lobpcg eigen vectors decomposition when eigen_solver == 'amg'","199","        and by the K-Means initialization.","328","    random_state : int seed, RandomState instance, or None (default)","329","        A pseudo random number generator used for the initialization","330","        of the lobpcg eigen vectors decomposition when eigen_solver == 'amg'","331","        and by the K-Means initialization."]}],"sklearn\/decomposition\/nmf.py":[{"add":["270","    random_state : int, RandomState instance or None, optional, default: None","271","        If int, random_state is the seed used by the random number generator;","272","        If RandomState instance, random_state is the random number generator;","273","        If None, the random number generator is the RandomState instance used","274","        by `np.random`. Used when ``random`` == 'nndsvdar' or 'random'.","449","    random_state : int, RandomState instance or None, optional, default: None","450","        If int, random_state is the seed used by the random number generator;","451","        If RandomState instance, random_state is the random number generator;","452","        If None, the random number generator is the RandomState instance used","453","        by `np.random`.","917","    random_state : int, RandomState instance or None, optional, default: None","918","        If int, random_state is the seed used by the random number generator;","919","        If RandomState instance, random_state is the random number generator;","920","        If None, the random number generator is the RandomState instance used","921","        by `np.random`.","1107","    random_state : int, RandomState instance or None, optional, default: None","1108","        If int, random_state is the seed used by the random number generator;","1109","        If RandomState instance, random_state is the random number generator;","1110","        If None, the random number generator is the RandomState instance used","1111","        by `np.random`."],"delete":["270","    random_state : int seed, RandomState instance, or None (default)","271","        Random number generator seed control, used in 'nndsvdar' and","272","        'random' modes.","447","    random_state : integer seed, RandomState instance, or None (default)","448","        Random number generator seed control.","912","    random_state : integer seed, RandomState instance, or None (default)","913","        Random number generator seed control.","1099","    random_state : integer seed, RandomState instance, or None (default)","1100","        Random number generator seed control."]}],"sklearn\/covariance\/robust_covariance.py":[{"add":["57","    random_state : int, RandomState instance or None, optional (default=None)","58","        If int, random_state is the seed used by the random number generator;","59","        If RandomState instance, random_state is the random number generator;","60","        If None, the random number generator is the RandomState instance used","61","        by `np.random`.","218","    random_state : int, RandomState instance or None, optional (default=None)","219","        If int, random_state is the seed used by the random number generator;","220","        If RandomState instance, random_state is the random number generator;","221","        If None, the random number generator is the RandomState instance used","222","        by `np.random`.","317","    random_state : int, RandomState instance or None, optional (default=None)","318","        If int, random_state is the seed used by the random number generator;","319","        If RandomState instance, random_state is the random number generator;","320","        If None, the random number generator is the RandomState instance used","321","        by `np.random`.","538","    random_state : int, RandomState instance or None, optional (default=None)","539","        If int, random_state is the seed used by the random number generator;","540","        If RandomState instance, random_state is the random number generator;","541","        If None, the random number generator is the RandomState instance used","542","        by `np.random`."],"delete":["57","    random_state : integer or numpy.RandomState, optional","58","        The random generator used. If an integer is given, it fixes the","59","        seed. Defaults to the global numpy random number generator.","216","    random_state : integer or numpy.RandomState, default None","217","        The random generator used. If an integer is given, it fixes the","218","        seed. Defaults to the global numpy random number generator.","313","    random_state : integer or numpy.RandomState, optional","314","        The generator used to randomly subsample. If an integer is","315","        given, it fixes the seed. Defaults to the global numpy random","316","        number generator.","533","    random_state : integer or numpy.RandomState, optional","534","        The random generator used. If an integer is given, it fixes the","535","        seed. Defaults to the global numpy random number generator."]}],"sklearn\/decomposition\/fastica_.py":[{"add":["201","    random_state : int, RandomState instance or None, optional (default=None)","202","        If int, random_state is the seed used by the random number generator;","203","        If RandomState instance, random_state is the random number generator;","204","        If None, the random number generator is the RandomState instance used","205","        by `np.random`.","420","    random_state : int, RandomState instance or None, optional (default=None)","421","        If int, random_state is the seed used by the random number generator;","422","        If RandomState instance, random_state is the random number generator;","423","        If None, the random number generator is the RandomState instance used","424","        by `np.random`."],"delete":["201","    random_state : int or RandomState","202","        Pseudo number generator state used for random sampling.","417","    random_state : int or RandomState","418","        Pseudo number generator state used for random sampling."]}],"sklearn\/kernel_approximation.py":[{"add":["40","    random_state : int, RandomState instance or None, optional (default=None)","42","        If RandomState instance, random_state is the random number generator;","43","        If None, the random number generator is the RandomState instance used","44","        by `np.random`.","128","    random_state : int, RandomState instance or None, optional (default=None)","130","        If RandomState instance, random_state is the random number generator;","131","        If None, the random number generator is the RandomState instance used","132","        by `np.random`.","400","    random_state : int, RandomState instance or None, optional (default=None)","402","        If RandomState instance, random_state is the random number generator;","403","        If None, the random number generator is the RandomState instance used","404","        by `np.random`."],"delete":["40","    random_state : {int, RandomState}, optional","42","        if RandomState instance, random_state is the random number generator.","126","    random_state : {int, RandomState}, optional","128","        if RandomState instance, random_state is the random number generator.","396","    random_state : {int, RandomState}, optional","398","        if RandomState instance, random_state is the random number generator.","399",""]}],"sklearn\/manifold\/spectral_embedding_.py":[{"add":["168","    random_state : int, RandomState instance or None, optional, default: None","170","        lobpcg eigenvectors decomposition.  If int, random_state is the seed","171","        used by the random number generator; If RandomState instance,","172","        random_state is the random number generator; If None, the random number","173","        generator is the RandomState instance used by `np.random`. Used when","174","        ``solver`` == 'amg'.","350","    random_state : int, RandomState instance or None, optional, default: None","352","        lobpcg eigenvectors.  If int, random_state is the seed used by the","353","        random number generator; If RandomState instance, random_state is the","354","        random number generator; If None, the random number generator is the","355","        RandomState instance used by `np.random`. Used when ``solver`` ==","356","        'amg'."],"delete":["168","    random_state : int seed, RandomState instance, or None (default)","170","        lobpcg eigenvectors decomposition when eigen_solver == 'amg'.","171","        By default, arpack is used.","347","    random_state : int seed, RandomState instance, or None, default : None","349","        lobpcg eigenvectors decomposition when eigen_solver == 'amg'."]}],"sklearn\/utils\/extmath.py":[{"add":["217","    random_state : int, RandomState instance or None, optional (default=None)","218","        The seed of the pseudo random number generator to use when shuffling","219","        the data.  If int, random_state is the seed used by the random number","220","        generator; If RandomState instance, random_state is the random number","221","        generator; If None, the random number generator is the RandomState","222","        instance used by `np.random`.","326","    random_state : int, RandomState instance or None, optional (default=None)","327","        The seed of the pseudo random number generator to use when shuffling","328","        the data.  If int, random_state is the seed used by the random number","329","        generator; If RandomState instance, random_state is the random number","330","        generator; If None, the random number generator is the RandomState","331","        instance used by `np.random`."],"delete":["217","    random_state : RandomState or an int seed (0 by default)","218","        A random number generator instance","322","    random_state : RandomState or an int seed (0 by default)","323","        A random number generator instance to make behavior"]}],"sklearn\/feature_extraction\/image.py":[{"add":["321","    random_state : int, RandomState instance or None, optional (default=None)","323","        `max_patches` is not None.  If int, random_state is the seed used by","324","        the random number generator; If RandomState instance, random_state is","325","        the random number generator; If None, the random number generator is","326","        the RandomState instance used by `np.random`.","455","    random_state : int, RandomState instance or None, optional (default=None)","456","        If int, random_state is the seed used by the random number generator;","457","        If RandomState instance, random_state is the random number generator;","458","        If None, the random number generator is the RandomState instance used","459","        by `np.random`."],"delete":["321","    random_state : int or RandomState","323","        `max_patches` is not None.","452","    random_state : int or RandomState","453","        Pseudo number generator state used for random sampling."]}],"sklearn\/neural_network\/multilayer_perceptron.py":[{"add":["757","    random_state : int, RandomState instance or None, optional, default None","758","        If int, random_state is the seed used by the random number generator;","759","        If RandomState instance, random_state is the random number generator;","760","        If None, the random number generator is the RandomState instance used","761","        by `np.random`.","1131","    random_state : int, RandomState instance or None, optional, default None","1132","        If int, random_state is the seed used by the random number generator;","1133","        If RandomState instance, random_state is the random number generator;","1134","        If None, the random number generator is the RandomState instance used","1135","        by `np.random`."],"delete":["757","    random_state : int or RandomState, optional, default None","758","        State or seed for random number generator.","1128","    random_state : int or RandomState, optional, default None","1129","        State or seed for random number generator."]}],"sklearn\/decomposition\/pca.py":[{"add":["185","    random_state : int, RandomState instance or None, optional (default None)","186","        If int, random_state is the seed used by the random number generator;","187","        If RandomState instance, random_state is the random number generator;","188","        If None, the random number generator is the RandomState instance used","189","        by `np.random`. Used when ``svd_solver`` == 'arpack' or 'randomized'.","605","    random_state : int, RandomState instance or None, optional, default=None","606","        If int, random_state is the seed used by the random number generator;","607","        If RandomState instance, random_state is the random number generator;","608","        If None, the random number generator is the RandomState instance used","609","        by `np.random`."],"delete":["185","    random_state : int or RandomState instance or None (default None)","186","        Pseudo Random Number generator seed control. If None, use the","187","        numpy.random singleton. Used by svd_solver == 'arpack' or 'randomized'.","603","    random_state : int or RandomState instance or None (default)","604","        Pseudo Random Number generator seed control. If None, use the","605","        numpy.random singleton."]}],"sklearn\/linear_model\/ridge.py":[{"add":["277","    random_state : int, RandomState instance or None, optional, default None","278","        The seed of the pseudo random number generator to use when shuffling","279","        the data.  If int, random_state is the seed used by the random number","280","        generator; If RandomState instance, random_state is the random number","281","        generator; If None, the random number generator is the RandomState","282","        instance used by `np.random`. Used when ``solver`` == 'sag'.","585","    random_state : int, RandomState instance or None, optional, default None","586","        The seed of the pseudo random number generator to use when shuffling","587","        the data.  If int, random_state is the seed used by the random number","588","        generator; If RandomState instance, random_state is the random number","589","        generator; If None, the random number generator is the RandomState","590","        instance used by `np.random`. Used when ``solver`` == 'sag'.","736","    random_state : int, RandomState instance or None, optional, default None","737","        The seed of the pseudo random number generator to use when shuffling","738","        the data.  If int, random_state is the seed used by the random number","739","        generator; If RandomState instance, random_state is the random number","740","        generator; If None, the random number generator is the RandomState","741","        instance used by `np.random`. Used when ``solver`` == 'sag'."],"delete":["277","    random_state : int seed, RandomState instance, or None (default)","278","        The seed of the pseudo random number generator to use when","279","        shuffling the data. Used only in 'sag' solver.","582","    random_state : int seed, RandomState instance, or None (default)","583","        The seed of the pseudo random number generator to use when","584","        shuffling the data. Used only in 'sag' solver.","730","    random_state : int seed, RandomState instance, or None (default)","731","        The seed of the pseudo random number generator to use when","732","        shuffling the data. Used in 'sag' solver."]}],"sklearn\/linear_model\/theil_sen.py":[{"add":["245","    random_state : int, RandomState instance or None, optional, default None","246","        A random number generator instance to define the state of the random","247","        permutations generator.  If int, random_state is the seed used by the","248","        random number generator; If RandomState instance, random_state is the","249","        random number generator; If None, the random number generator is the","250","        RandomState instance used by `np.random`."],"delete":["245","    random_state : RandomState or an int seed, optional, default None","246","        A random number generator instance to define the state of the","247","        random permutations generator."]}],"sklearn\/decomposition\/truncated_svd.py":[{"add":["61","    random_state : int, RandomState instance or None, optional, default = None","62","        If int, random_state is the seed used by the random number generator;","63","        If RandomState instance, random_state is the random number generator;","64","        If None, the random number generator is the RandomState instance used","65","        by `np.random`."],"delete":["61","    random_state : int or RandomState, optional","62","        (Seed for) pseudo-random number generator. If not given, the","63","        numpy.random singleton is used."]}],"sklearn\/datasets\/samples_generator.py":[{"add":["1061","    random_state : int, RandomState instance or None, optional (default=None)","1062","        If int, random_state is the seed used by the random number generator;","1063","        If RandomState instance, random_state is the random number generator;","1064","        If None, the random number generator is the RandomState instance used","1065","        by `np.random`."],"delete":["1061","    random_state : int or RandomState instance, optional (default=None)","1062","        seed used by the pseudo random number generator"]}],"sklearn\/gaussian_process\/gaussian_process.py":[{"add":["171","    random_state : int, RandomState instance or None, optional (default=None)","173","        the Welch optimizer. If int, random_state is the seed used by the","174","        random number generator; If RandomState instance, random_state is the","175","        random number generator; If None, the random number generator is the","176","        RandomState instance used by `np.random`."],"delete":["171","    random_state : integer or numpy.RandomState, optional","173","        the Welch optimizer. If an integer is given, it fixes the seed.","174","        Defaults to the global numpy random number generator.","175",""]}],"sklearn\/cluster\/bicluster.py":[{"add":["238","    random_state : int, RandomState instance or None, optional, default: None","239","        If int, random_state is the seed used by the random number generator;","240","        If RandomState instance, random_state is the random number generator;","241","        If None, the random number generator is the RandomState instance used","242","        by `np.random`.","370","    random_state : int, RandomState instance or None, optional, default: None","371","        If int, random_state is the seed used by the random number generator;","372","        If RandomState instance, random_state is the random number generator;","373","        If None, the random number generator is the RandomState instance used","374","        by `np.random`."],"delete":["238","    random_state : int seed, RandomState instance, or None (default)","239","        A pseudo random number generator used by the K-Means","240","        initialization.","368","    random_state : int seed, RandomState instance, or None (default)","369","        A pseudo random number generator used by the K-Means","370","        initialization."]}],"sklearn\/linear_model\/stochastic_gradient.py":[{"add":["610","    random_state : int, RandomState instance or None, optional (default=None)","611","        The seed of the pseudo random number generator to use when shuffling","612","        the data.  If int, random_state is the seed used by the random number","613","        generator; If RandomState instance, random_state is the random number","614","        generator; If None, the random number generator is the RandomState","615","        instance used by `np.random`.","1139","    random_state : int, RandomState instance or None, optional (default=None)","1140","        The seed of the pseudo random number generator to use when shuffling","1141","        the data.  If int, random_state is the seed used by the random number","1142","        generator; If RandomState instance, random_state is the random number","1143","        generator; If None, the random number generator is the RandomState","1144","        instance used by `np.random`."],"delete":["610","    random_state : int seed, RandomState instance, or None (default)","611","        The seed of the pseudo random number generator to use when","612","        shuffling the data.","1136","    random_state : int seed, RandomState instance, or None (default)","1137","        The seed of the pseudo random number generator to use when","1138","        shuffling the data."]}],"sklearn\/model_selection\/_validation.py":[{"add":["582","    random_state : int, RandomState instance or None, optional (default=0)","583","        If int, random_state is the seed used by the random number generator;","584","        If RandomState instance, random_state is the random number generator;","585","        If None, the random number generator is the RandomState instance used","586","        by `np.random`.","747","    random_state : int, RandomState instance or None, optional (default=None)","748","        If int, random_state is the seed used by the random number generator;","749","        If RandomState instance, random_state is the random number generator;","750","        If None, the random number generator is the RandomState instance used","751","        by `np.random`. Used when ``shuffle`` == 'True'."],"delete":["582","    random_state : RandomState or an int seed (0 by default)","583","        A random number generator instance to define the state of the","584","        random permutations generator.","745","    random_state : None, int or RandomState","746","        When shuffle=True, pseudo-random number generator state used for","747","        shuffling. If None, use default numpy RNG for shuffling."]}],"sklearn\/decomposition\/dict_learning.py":[{"add":["330","    random_state : int, RandomState instance or None, optional (default=None)","331","        If int, random_state is the seed used by the random number generator;","332","        If RandomState instance, random_state is the random number generator;","333","        If None, the random number generator is the RandomState instance used","334","        by `np.random`.","439","    random_state : int, RandomState instance or None, optional (default=None)","440","        If int, random_state is the seed used by the random number generator;","441","        If RandomState instance, random_state is the random number generator;","442","        If None, the random number generator is the RandomState instance used","443","        by `np.random`.","624","    random_state : int, RandomState instance or None, optional (default=None)","625","        If int, random_state is the seed used by the random number generator;","626","        If RandomState instance, random_state is the random number generator;","627","        If None, the random number generator is the RandomState instance used","628","        by `np.random`.","1011","    random_state : int, RandomState instance or None, optional (default=None)","1012","        If int, random_state is the seed used by the random number generator;","1013","        If RandomState instance, random_state is the random number generator;","1014","        If None, the random number generator is the RandomState instance used","1015","        by `np.random`.","1174","    random_state : int, RandomState instance or None, optional (default=None)","1175","        If int, random_state is the seed used by the random number generator;","1176","        If RandomState instance, random_state is the random number generator;","1177","        If None, the random number generator is the RandomState instance used","1178","        by `np.random`."],"delete":["330","    random_state : int or RandomState","331","        Pseudo number generator state used for random sampling.","436","    random_state : int or RandomState","437","        Pseudo number generator state used for random sampling.","618","    random_state : int or RandomState","619","        Pseudo number generator state used for random sampling.","1002","    random_state : int or RandomState","1003","        Pseudo number generator state used for random sampling.","1162","    random_state : int or RandomState","1163","        Pseudo number generator state used for random sampling."]}],"sklearn\/ensemble\/gradient_boosting.py":[{"add":["1769","        previous solution."],"delete":["1769","        p","1770","revious solution."]}],"sklearn\/dummy.py":[{"add":["49","    random_state : int, RandomState instance or None, optional, default=None","50","        If int, random_state is the seed used by the random number generator;","51","        If RandomState instance, random_state is the random number generator;","52","        If None, the random number generator is the RandomState instance used","53","        by `np.random`."],"delete":["49","    random_state : int seed, RandomState instance, or None (default)","50","        The seed of the pseudo random number generator to use."]}],"sklearn\/manifold\/t_sne.py":[{"add":["584","    random_state : int, RandomState instance or None, optional (default: None)","585","        If int, random_state is the seed used by the random number generator;","586","        If RandomState instance, random_state is the random number generator;","587","        If None, the random number generator is the RandomState instance used","588","        by `np.random`.  Note that different initializations might result in","589","        different local minima of the cost function."],"delete":["584","    random_state : int or RandomState instance or None (default)","585","        Pseudo Random Number generator seed control. If None, use the","586","        numpy.random singleton. Note that different initializations","587","        might result in different local minima of the cost function."]}],"sklearn\/decomposition\/sparse_pca.py":[{"add":["62","    random_state : int, RandomState instance or None, optional (default=None)","63","        If int, random_state is the seed used by the random number generator;","64","        If RandomState instance, random_state is the random number generator;","65","        If None, the random number generator is the RandomState instance used","66","        by `np.random`.","233","    random_state : int, RandomState instance or None, optional (default=None)","234","        If int, random_state is the seed used by the random number generator;","235","        If RandomState instance, random_state is the random number generator;","236","        If None, the random number generator is the RandomState instance used","237","        by `np.random`."],"delete":["62","    random_state : int or RandomState","63","        Pseudo number generator state used for random sampling.","230","    random_state : int or RandomState","231","        Pseudo number generator state used for random sampling."]}],"sklearn\/manifold\/locally_linear.py":[{"add":["142","    random_state : int, RandomState instance or None, optional (default=None)","143","        If int, random_state is the seed used by the random number generator;","144","        If RandomState instance, random_state is the random number generator;","145","        If None, the random number generator is the RandomState instance used","146","        by `np.random`. Used when ``solver`` == 'arpack'.","249","    random_state : int, RandomState instance or None, optional (default=None)","250","        If int, random_state is the seed used by the random number generator;","251","        If RandomState instance, random_state is the random number generator;","252","        If None, the random number generator is the RandomState instance used","253","        by `np.random`. Used when ``solver`` == 'arpack'.","574","    random_state : int, RandomState instance or None, optional (default=None)","575","        If int, random_state is the seed used by the random number generator;","576","        If RandomState instance, random_state is the random number generator;","577","        If None, the random number generator is the RandomState instance used","578","        by `np.random`. Used when ``eigen_solver`` == 'arpack'."],"delete":["142","    random_state : numpy.RandomState or int, optional","143","        The generator or seed used to determine the starting vector for arpack","144","        iterations.  Defaults to numpy.random.","247","    random_state : numpy.RandomState or int, optional","248","        The generator or seed used to determine the starting vector for arpack","249","        iterations.  Defaults to numpy.random.","570","    random_state : numpy.RandomState or int, optional","571","        The generator or seed used to determine the starting vector for arpack","572","        iterations.  Defaults to numpy.random."]}],"sklearn\/decomposition\/kernel_pca.py":[{"add":["76","    random_state : int, RandomState instance or None, optional (default=None)","77","        If int, random_state is the seed used by the random number generator;","78","        If RandomState instance, random_state is the random number generator;","79","        If None, the random number generator is the RandomState instance used","80","        by `np.random`. Used when ``eigen_solver`` == 'arpack'."],"delete":["76","    random_state : int seed, RandomState instance, or None, default=None","77","        A pseudo random number generator used for the initialization of the","78","        residuals when eigen_solver == 'arpack'."]}],"sklearn\/cluster\/k_means_.py":[{"add":["232","    random_state : int, RandomState instance or None, optional, default: None","233","        If int, random_state is the seed used by the random number generator;","234","        If RandomState instance, random_state is the random number generator;","235","        If None, the random number generator is the RandomState instance used","236","        by `np.random`.","452","    random_state : int, RandomState instance or None, optional, default: None","453","        If int, random_state is the seed used by the random number generator;","454","        If RandomState instance, random_state is the random number generator;","455","        If None, the random number generator is the RandomState instance used","456","        by `np.random`.","642","    random_state : int, RandomState instance or None, optional, default: None","643","        If int, random_state is the seed used by the random number generator;","644","        If RandomState instance, random_state is the random number generator;","645","        If None, the random number generator is the RandomState instance used","646","        by `np.random`.","771","    random_state : int, RandomState instance or None, optional, default: None","772","        If int, random_state is the seed used by the random number generator;","773","        If RandomState instance, random_state is the random number generator;","774","        If None, the random number generator is the RandomState instance used","775","        by `np.random`.","1014","    random_state : int, RandomState instance or None, optional, default: None","1015","        If int, random_state is the seed used by the random number generator;","1016","        If RandomState instance, random_state is the random number generator;","1017","        If None, the random number generator is the RandomState instance used","1018","        by `np.random`.","1254","    random_state : int, RandomState instance or None, optional, default: None","1255","        If int, random_state is the seed used by the random number generator;","1256","        If RandomState instance, random_state is the random number generator;","1257","        If None, the random number generator is the RandomState instance used","1258","        by `np.random`."],"delete":["232","    random_state : integer or numpy.RandomState, optional","233","        The generator used to initialize the centers. If an integer is","234","        given, it fixes the seed. Defaults to the global numpy random","235","        number generator.","451","    random_state : integer or numpy.RandomState, optional","452","        The generator used to initialize the centers. If an integer is","453","        given, it fixes the seed. Defaults to the global numpy random","454","        number generator.","640","    random_state : integer or numpy.RandomState, optional","641","        The generator used to initialize the centers. If an integer is","642","        given, it fixes the seed. Defaults to the global numpy random","643","        number generator.","768","    random_state : integer or numpy.RandomState, optional","769","        The generator used to initialize the centers. If an integer is","770","        given, it fixes the seed. Defaults to the global numpy random","771","        number generator.","1010","    random_state : integer or numpy.RandomState, optional","1011","        The generator used to initialize the centers. If an integer is","1012","        given, it fixes the seed. Defaults to the global numpy random","1013","        number generator.","1249","    random_state : integer or numpy.RandomState, optional","1250","        The generator used to initialize the centers. If an integer is","1251","        given, it fixes the seed. Defaults to the global numpy random","1252","        number generator."]}]}},"93871e2e614630ff5ff0c08903fa9591ba5bb2dc":{"changes":{"doc\/whats_new.rst":"MODIFY","sklearn\/manifold\/_barnes_hut_tsne.pyx":"MODIFY","sklearn\/tests\/test_multioutput.py":"MODIFY","sklearn\/cluster\/_k_means_elkan.pyx":"MODIFY","doc\/modules\/neural_networks_unsupervised.rst":"MODIFY"},"diff":{"doc\/whats_new.rst":[{"add":["755","     converts single output regressors to multi-output regressors by fitting"],"delete":["755","     converts single output regressors to multi-ouput regressors by fitting"]}],"sklearn\/manifold\/_barnes_hut_tsne.pyx":[{"add":["82","    # Number of dimensions in the output"],"delete":["82","    # Number of dimensions in the ouput"]}],"sklearn\/tests\/test_multioutput.py":[{"add":["195","def test_multi_output_classifiation_partial_fit_no_first_classes_exception():"],"delete":["195","def test_mutli_output_classifiation_partial_fit_no_first_classes_exception():"]}],"sklearn\/cluster\/_k_means_elkan.pyx":[{"add":["20","cdef floating euclidean_dist(floating* a, floating* b, int n_features) nogil:","91","        d_c = euclidean_dist(x, centers, n_features)","96","                dist = euclidean_dist(x, c, n_features)","199","                        upper_bound = euclidean_dist(x_p, centers_p + label * n_features, n_features)","208","                        distance = euclidean_dist(x_p, centers_p + center_index * n_features, n_features)"],"delete":["20","cdef floating euclidian_dist(floating* a, floating* b, int n_features) nogil:","91","        d_c = euclidian_dist(x, centers, n_features)","96","                dist = euclidian_dist(x, c, n_features)","199","                        upper_bound = euclidian_dist(x_p, centers_p + label * n_features, n_features)","208","                        distance = euclidian_dist(x_p, centers_p + center_index * n_features, n_features)"]}],"doc\/modules\/neural_networks_unsupervised.rst":[{"add":["55","visible and hidden unit, omitted from the image for simplicity."],"delete":["55","visible and hidden unit, ommited from the image for simplicity."]}]}},"6e8ebdac4e2931c9a964343c0d650862efc067dd":{"changes":{"sklearn\/linear_model\/ransac.py":"MODIFY","doc\/whats_new.rst":"MODIFY","sklearn\/linear_model\/tests\/test_ransac.py":"MODIFY"},"diff":{"sklearn\/linear_model\/ransac.py":[{"add":["344","        self.n_trials_ = 0","345","        max_trials = self.max_trials","346","        while self.n_trials_ < max_trials:","347","            self.n_trials_ += 1","421","            max_trials = min(","422","                max_trials,","423","                _dynamic_max_trials(n_inliers_best, n_samples,","424","                                    min_samples, self.stop_probability))","425","","427","            if n_inliers_best >= self.stop_n_inliers or \\","428","                            score_best >= self.stop_score:"],"delete":["344","        for self.n_trials_ in range(1, self.max_trials + 1):","419","            if (n_inliers_best >= self.stop_n_inliers","420","                    or score_best >= self.stop_score","421","                    or self.n_trials_","422","                       >= _dynamic_max_trials(n_inliers_best, n_samples,","423","                                              min_samples,","424","                                              self.stop_probability)):"]}],"doc\/whats_new.rst":[{"add":["197","   - Fixed a bug where :func:`sklearn.linear_model.RANSACRegressor.fit` may run until","198","     ``max_iter`` if finds a large inlier group early. :issue:`8251` by :user:`aivision2020`.","199",""],"delete":[]}],"sklearn\/linear_model\/tests\/test_ransac.py":[{"add":["24","rng = np.random.RandomState(1000)","25","outliers = np.unique(rng.randint(len(X), size=200))","26","data[outliers, :] += 50 + rng.rand(len(outliers), 2) * 10","91","    # there is a 1e-9 chance it will take these many trials. No good reason","92","    # 1e-2 isn't enough, can still happen","93","    # 2 is the what ransac defines  as min_samples = X.shape[1] + 1","94","    max_trials = _dynamic_max_trials(","95","        len(X) - len(outliers), X.shape[0], 2, 1 - 1e-9)","96","    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2)","97","    for i in range(50):","98","        ransac_estimator.set_params(min_samples=2, random_state=i)","99","        ransac_estimator.fit(X, y)","100","        assert_less(ransac_estimator.n_trials_, max_trials + 1)","387",""],"delete":["24","outliers = np.array((10, 30, 200))","25","data[outliers[0], :] = (1000, 1000)","26","data[outliers[1], :] = (-1000, -1000)","27","data[outliers[2], :] = (-100, -50)","92","    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,","93","                                       residual_threshold=5, max_trials=11,","94","                                       random_state=0)","95","    assert getattr(ransac_estimator, 'n_trials_', None) is None","96","    ransac_estimator.fit(X, y)","97","    assert_equal(ransac_estimator.n_trials_, 2)","98",""]}]}},"899885640626f442b5ea8bbbccb2889c40f17738":{"changes":{"sklearn\/linear_model\/ridge.py":"MODIFY"},"diff":{"sklearn\/linear_model\/ridge.py":[{"add":["887",""],"delete":["887","        w[v == 0] = 0"]}]}},"a36c852e0253138b8bae1aa2dc0ea49e3da1d390":{"changes":{"sklearn\/metrics\/tests\/test_common.py":"MODIFY"},"diff":{"sklearn\/metrics\/tests\/test_common.py":[{"add":["1015","    # regression","1016","    y_true = random_state.random_sample(size=(n_samples,))","1017","    y_pred = random_state.random_sample(size=(n_samples,))","1018","    for name in ALL_METRICS:","1019","        if name not in REGRESSION_METRICS:","1020","            continue","1021","        if name in METRICS_WITHOUT_SAMPLE_WEIGHT:","1022","            continue","1023","        metric = ALL_METRICS[name]","1024","        yield _named_check(check_sample_weight_invariance, name), name,\\","1025","            metric, y_true, y_pred","1033","        if name in REGRESSION_METRICS:","1034","            continue","1052","        if name in REGRESSION_METRICS:","1053","            continue"],"delete":[]}]}},"3dc8d2f83bfb94dbb5a7190bac39e046063db4e0":{"changes":{"examples\/text\/document_classification_20newsgroups.py":"MODIFY"},"diff":{"examples\/text\/document_classification_20newsgroups.py":[{"add":["36","from sklearn.feature_selection import SelectFromModel","262","    results.append(benchmark(LinearSVC(penalty=penalty, dual=False,","263","                                       tol=1e-3)))","291","  ('feature_selection', SelectFromModel(LinearSVC(penalty=\"l1\", dual=False,","292","                                                  tol=1e-3))),","293","  ('classification', LinearSVC(penalty=\"l2\"))])))"],"delete":["261","    results.append(benchmark(LinearSVC(loss='l2', penalty=penalty,","262","                                            dual=False, tol=1e-3)))","290","  ('feature_selection', LinearSVC(penalty=\"l1\", dual=False, tol=1e-3)),","291","  ('classification', LinearSVC())","292","])))"]}]}},"754109c78d90cc792f0944aaaa11371175b09277":{"changes":{"sklearn\/model_selection\/_split.py":"MODIFY","sklearn\/model_selection\/tests\/test_search.py":"MODIFY","sklearn\/model_selection\/tests\/test_split.py":"MODIFY","sklearn\/model_selection\/tests\/test_validation.py":"MODIFY"},"diff":{"sklearn\/model_selection\/_split.py":[{"add":["190","            raise ValueError(\"The 'X' parameter should not be None.\")","261","            raise ValueError(\"The 'X' parameter should not be None.\")","479","            raise ValueError(\"The 'groups' parameter should not be None.\")","767","    >>> logo.get_n_splits(groups=groups) # 'groups' is always required","768","    2","789","            raise ValueError(\"The 'groups' parameter should not be None.\")","800","    def get_n_splits(self, X=None, y=None, groups=None):","805","        X : object, optional","808","        y : object, optional","813","            train\/test set. This 'groups' parameter must always be specified to","814","            calculate the number of splits, though the other parameters can be","815","            omitted.","823","            raise ValueError(\"The 'groups' parameter should not be None.\")","824","        groups = check_array(groups, ensure_2d=False, dtype=None)","859","    >>> lpgo.get_n_splits(groups=groups)  # 'groups' is always required","860","    3","888","            raise ValueError(\"The 'groups' parameter should not be None.\")","904","    def get_n_splits(self, X=None, y=None, groups=None):","909","        X : object, optional","912","        y : object, optional","917","            train\/test set. This 'groups' parameter must always be specified to","918","            calculate the number of splits, though the other parameters can be","919","            omitted.","927","            raise ValueError(\"The 'groups' parameter should not be None.\")","1326","            raise ValueError(\"The 'groups' parameter should not be None.\")"],"delete":["190","            raise ValueError(\"The X parameter should not be None\")","261","            raise ValueError(\"The X parameter should not be None\")","479","            raise ValueError(\"The groups parameter should not be None\")","787","            raise ValueError(\"The groups parameter should not be None\")","798","    def get_n_splits(self, X, y, groups):","803","        X : object","806","        y : object","811","            train\/test set.","819","            raise ValueError(\"The groups parameter should not be None\")","881","            raise ValueError(\"The groups parameter should not be None\")","897","    def get_n_splits(self, X, y, groups):","902","        X : object","904","            ``np.zeros(n_samples)`` may be used as a placeholder.","906","        y : object","908","            ``np.zeros(n_samples)`` may be used as a placeholder.","912","            train\/test set.","920","            raise ValueError(\"The groups parameter should not be None\")","922","        X, y, groups = indexable(X, y, groups)","1320","            raise ValueError(\"The groups parameter should not be None\")"]}],"sklearn\/model_selection\/tests\/test_search.py":[{"add":["319","                             \"The 'groups' parameter should not be None.\","],"delete":["319","                             \"The groups parameter should not be None\","]}],"sklearn\/model_selection\/tests\/test_split.py":[{"add":["191","    # ValueError for get_n_splits methods","192","    msg = \"The 'X' parameter should not be None.\"","193","    assert_raise_message(ValueError, msg,","194","                         loo.get_n_splits, None, y, groups)","195","    assert_raise_message(ValueError, msg,","196","                         lpo.get_n_splits, None, y, groups)","197","","766","    # check get_n_splits() with dummy parameters","767","    assert_equal(logo.get_n_splits(None, None, ['a', 'b', 'c', 'b', 'c']), 3)","768","    assert_equal(logo.get_n_splits(groups=[1.0, 1.1, 1.0, 1.2]), 3)","769","    assert_equal(lpgo_2.get_n_splits(None, None, np.arange(4)), 6)","770","    assert_equal(lpgo_1.get_n_splits(groups=np.arange(4)), 4)","771","","772","    # raise ValueError if a `groups` parameter is illegal","773","    with assert_raises(ValueError):","774","        logo.get_n_splits(None, None, [0.0, np.nan, 0.0])","775","    with assert_raises(ValueError):","776","        lpgo_2.get_n_splits(None, None, [0.0, np.inf, 0.0])","777","","778","    msg = \"The 'groups' parameter should not be None.\"","779","    assert_raise_message(ValueError, msg,","780","                         logo.get_n_splits, None, None, None)","781","    assert_raise_message(ValueError, msg,","782","                         lpgo_1.get_n_splits, None, None, None)","783",""],"delete":[]}],"sklearn\/model_selection\/tests\/test_validation.py":[{"add":["261","                             \"The 'groups' parameter should not be None.\",","264","                             \"The 'groups' parameter should not be None.\","],"delete":["261","                             \"The groups parameter should not be None\",","264","                             \"The groups parameter should not be None\","]}]}},"676f878e9815dee360e8ea6abb5d233cc82af025":{"changes":{"sklearn\/ensemble\/gradient_boosting.py":"MODIFY"},"diff":{"sklearn\/ensemble\/gradient_boosting.py":[{"add":["1435","                 min_impurity_split=None, init=None,","1842","                 min_impurity_split=None, init=None, random_state=None,"],"delete":["1435","                 min_impurity_split=1e-7, init=None,","1842","                 min_impurity_split=1e-7, init=None, random_state=None,"]}]}},"15921603ea2bdc5bdbc3aa1bee8f9fdd3ff87d46":{"changes":{"doc\/tutorial\/statistical_inference\/supervised_learning.rst":"MODIFY"},"diff":{"doc\/tutorial\/statistical_inference\/supervised_learning.rst":[{"add":["343","    provides the :class:`LassoLars` object using the *LARS* algorithm,"],"delete":["343","    provides the :class:`LassoLars` object using the *LARS* algorthm,"]}]}},"5210f810f78d7aa102cb56e6b586880a771980b4":{"changes":{"sklearn\/feature_selection\/univariate_selection.py":"MODIFY"},"diff":{"sklearn\/feature_selection\/univariate_selection.py":[{"add":["232","    Linear model for testing the individual effect of each of many regressors.","233","    This is a scoring function to be used in a feature seletion procedure, not","234","    a free standing feature selection procedure.","238","    1. The correlation between each regressor and the target is computed,","243","    For more on usage see the :ref:`User Guide <univariate_feature_selection>`.","264","","267","    mutual_info_regression: Mutual information for a continuous target.","270","    SelectKBest: Select features based on the k highest scores.","271","    SelectFpr: Select features based on a false positive rate test.","272","    SelectFdr: Select features based on an estimated false discovery rate.","273","    SelectFwe: Select features based on family-wise error rate.","274","    SelectPercentile: Select features based on percentile of the highest","275","        scores."],"delete":["232","    Quick linear model for testing the effect of a single regressor,","233","    sequentially for many regressors.","237","    1. The cross correlation between each regressor and the target is computed,","242","    Read more in the :ref:`User Guide <univariate_feature_selection>`."]}]}},"9b75a81b2dd89daf93e483b3b32ea1759edaf937":{"changes":{"examples\/linear_model\/plot_lasso_and_elasticnet.py":"MODIFY"},"diff":{"examples\/linear_model\/plot_lasso_and_elasticnet.py":[{"add":["30","y += 0.01 * np.random.normal(size=n_samples)"],"delete":["30","y += 0.01 * np.random.normal((n_samples,))"]}]}},"306de84cf1df605f2d8963f242f84cfcb9eeb8d4":{"changes":{"doc\/modules\/sgd.rst":"MODIFY"},"diff":{"doc\/modules\/sgd.rst":[{"add":["281",":math:`x_i \\in \\mathbf{R}^m` and :math:`y_i \\in \\{-1,1\\}`, our goal is to"],"delete":["281",":math:`x_i \\in \\mathbf{R}^n` and :math:`y_i \\in \\{-1,1\\}`, our goal is to"]}]}}}